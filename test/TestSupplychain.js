// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within

const { reverts } = require("truffle-assertions");

// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function (accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei(".01", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    let instance;

    before(async () => {
        instance = await SupplyChain.deployed();
    });

    // 1st Test
    it("1 - Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Harvested()
        instance.Harvested((error, event) => {
            if (error) {
                console.log("Harvested error: " + error);
                assert.equal(1, 2, 'Error: Harvested');
            } else {
                //console.log("Harvested event: " + JSON.stringify(event, null, 2));
                eventEmitted = true;
            }
        });

        // Mark an item as Harvested by calling function harvestItem()
        await instance.harvestItem(upc, originFarmerID, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productID, productNotes, productPrice)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await instance.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc)

        //console.log("resultBufferOne: " + JSON.stringify(resultBufferOne, null, 2));
        //console.log("resultBufferOne: " + JSON.stringify(resultBufferOne, null, 2));

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU, sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC, upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.ownerID, originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne.originFarmName, originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne.originFarmInformation, originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne.originFarmLatitude, originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne.originFarmLongitude, originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo.itemState, 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 2nd Test
    it("2 - Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Processed()
        instance.Processed((error, event) => {
            if (error) {
                console.log("Processed error: " + error);
                assert.equal(1, 2, 'Error: Processed');
            } else {
                //console.log("Processed event: " + JSON.stringify(event, null, 2));
                eventEmitted = true;
            }
        });

        // Mark an item as Harvested by calling function processtItem()
        await instance.processItem(upc, { from: originFarmerID })

        // Retrieve the just now saved item from blockchain by calling function resultBufferOne()
        const resultBufferOne = await instance.fetchItemBufferOne.call(upc)

        //console.log("resultBufferOne: " + JSON.stringify(resultBufferOne, null, 2));

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU, sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC, upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 3rd Test
    it("3 - Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Packed()
        instance.Packed((error, event) => {
            if (error) {
                console.log("Packed error: " + error);
                assert.equal(1, 2, 'Error: Packed');
            } else {
                //console.log("Packed event: " + JSON.stringify(event, null, 2));
                eventEmitted = true;
            }
        });

        //Add farmer role to address
        await instance.addFarmer(originFarmerID);

        // Mark an item as Packed by calling function packItem()
        await instance.packItem(upc, { from: originFarmerID })

        // Retrieve the just now saved item from blockchain by calling function resultBufferOne()
        const resultBufferOne = await instance.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc);

        //console.log("resultBufferOne: " + JSON.stringify(resultBufferOne, null, 2));
        //console.log("resultBufferTwo: " + JSON.stringify(resultBufferTwo, null, 2));

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU, sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne.itemUPC, upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferTwo.itemState, 2 /*"Packed"*/, 'Error: Invalid State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');

    })

    // 4th Test
    it("4 - Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Packed()
        instance.ForSale((error, event) => {
            if (error) {
                console.log("ForSale error: " + error);
                assert.equal(1, 2, 'Error: ForSale');
            } else {
                //console.log("ForSale event: " + JSON.stringify(event, null, 2));
                eventEmitted = true;
            }
        });

        // Mark an item as Harvested by calling function sellItem()
        await instance.sellItem(upc, productPrice, { from: originFarmerID })

        // Retrieve the just now saved item from blockchain by calling function resultBufferOne()
        const resultBufferOne = await instance.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc)

        //console.log("resultBufferOne: " + JSON.stringify(resultBufferOne, null, 2));
        //console.log("resultBufferTwo: " + JSON.stringify(resultBufferTwo, null, 2));

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU, sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC, upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne.originFarmerID, originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferTwo.itemState, 3/*"ForSale"*/, 'Error: Invalid State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 5th Test
    it("5 - Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Sold()
        instance.Sold((error, event) => {
            if (error) {
                console.log("Sold error: " + error);
                assert.equal(1, 2, 'Error: Sold');
            } else {
                //console.log("Sold event: " + JSON.stringify(event, null, 2));
                eventEmitted = true;
            }
        });

        //Add distributor role to address
        await instance.addDistributor(distributorID);


        // Mark an item as Sold by calling function buyItem()
        const resultBufferx = await instance.fetchItemBufferTwo.call(upc)

        await instance.buyItem(upc, { from: distributorID, value: productPrice });

        // Retrieve the just now saved item from blockchain by calling function resultBufferOne()
        const resultBufferOne = await instance.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc)

        //console.log("resultBufferOne: " + JSON.stringify(resultBufferOne, null, 2));
        //console.log("resultBufferTwo: " + JSON.stringify(resultBufferTwo, null, 2));

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU, sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne.itemUPC, upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferTwo.itemState, 4, 'Error: processItem - Invalid State');
        assert.equal(resultBufferTwo.distributorID, distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');

    })

    // 6th Test
    it("6 - Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Packed()
        instance.Shipped((error, event) => {
            if (error) {
                console.log("Shipped error: " + error);
                assert.equal(1, 2, 'Error: Shipped');
            } else {
                //console.log("Shipped event: " + JSON.stringify(event, null, 2));
                eventEmitted = true;
            }
        });

        //Add distributor role to address
        //await instance.addDistributor(distributorID);
        // Mark an item as Harvested by calling function shipItem()
        await instance.shipItem(upc, { from: distributorID })

        // Retrieve the just now saved item from blockchain by calling function resultBufferOne()
        const resultBufferOne = await instance.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc)

        //console.log("resultBufferOne: " + JSON.stringify(resultBufferOne, null, 2));
        //console.log("resultBufferTwo: " + JSON.stringify(resultBufferTwo, null, 2));

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU, sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne.itemUPC, upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferTwo.itemState, 5, 'Error: processItem - Invalid State');
        assert.equal(resultBufferTwo.distributorID, distributorID, 'Error: Missing or Invalid distributorID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');

    })

    // 7th Test
    it("7 - Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Received()
        await instance.Received((error, event) => {
            if (error) {
                console.log("Received error: " + error);
                assert.equal(1, 2, 'Error: Received');
            } else {
                //console.log("Received event: " + JSON.stringify(event, null, 2));
                eventEmitted = true;
            }
        });

        //Add retailer role to address
        await instance.addRetailer(retailerID);
        // Mark an item as Harvested by calling function receiveItem()
        await instance.receiveItem(upc, { from: retailerID })

        // Retrieve the just now saved item from blockchain by calling function resultBufferOne()
        const resultBufferOne = await instance.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc)

        //console.log("resultBufferOne: " + JSON.stringify(resultBufferOne, null, 2));
        //console.log("resultBufferTwo: " + JSON.stringify(resultBufferTwo, null, 2));

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU, sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne.itemUPC, upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferTwo.itemState, 6, 'Error: processItem - Invalid State');
        assert.equal(resultBufferTwo.retailerID, retailerID, 'Error: Missing or Invalid retailerID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');

    })

    // 8th Test
    it("8 - Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Received()
        instance.Purchased((error, event) => {
            if (error) {
                console.log("Purchased error: " + error);
                assert.equal(1, 2, 'Error: Purchased');
            } else {
                //console.log("Purchased event: " + JSON.stringify(event, null, 2));
                eventEmitted = true;
            }
        });

        //Add consumer role to address
        await instance.addConsumer(consumerID);
        // Mark an item as Harvested by calling function receiveItem()
        await instance.purchaseItem(upc, { from: consumerID });

        // Retrieve the just now saved item from blockchain by calling function resultBufferOne()
        const resultBufferOne = await instance.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc)

        //console.log("resultBufferOne: " + JSON.stringify(resultBufferOne, null, 2));
        //console.log("resultBufferTwo: " + JSON.stringify(resultBufferTwo, null, 2));

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU, sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne.itemUPC, upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferTwo.itemState, 7, 'Error: processItem - Invalid State');
        assert.equal(resultBufferTwo.consumerID, consumerID, 'Error: Missing or Invalid consumerID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');

    })

    // 9th Test
    it("9 - Testing smart contract function resultBufferOne() that allows anyone to fetch item details from blockchain", async () => {
        const resultBufferOne = await instance.fetchItemBufferOne.call(upc)

        //console.log("resultBufferOne: " + JSON.stringify(resultBufferOne, null, 2));

        // Verify the result set
        assert.equal(resultBufferOne.itemSKU, sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne.itemUPC, upc, 'Error: Invalid item UPC')

    })

    // 10th Test
    it("10 - Testing smart contract function resultBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
        const resultBufferTwo = await instance.fetchItemBufferTwo.call(upc)

        //console.log("resultBufferTwo: " + JSON.stringify(resultBufferTwo, null, 2));

        // Verify the result set
        assert.equal(resultBufferTwo.itemSKU, sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo.itemUPC, upc, 'Error: Invalid item UPC')

    })

});